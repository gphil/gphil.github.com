<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>gphil's blog - Posts tagged clojure</title>
    <link href="http://gphil.net/tags/clojure.xml" rel="self" />
    <link href="http://gphil.net" />
    <id>http://gphil.net/tags/clojure.xml</id>
    <author>
        <name>Greg Phillips</name>
        <email>gap023@gmail.com</email>
    </author>
    <updated>2013-07-11T00:00:00Z</updated>
    <entry>
    <title>Leiningen Download Stats</title>
    <link href="http://gphil.net/posts/2013-07-11-2013-leiningen-download-stats.html" />
    <id>http://gphil.net/posts/2013-07-11-2013-leiningen-download-stats.html</id>
    <published>2013-07-11T00:00:00Z</published>
    <updated>2013-07-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>About a month ago, I wrote a post <a href="2013-06-10-tracking-clojure-versus-ruby-adoption.html">comparing Ruby and Clojure adoption</a> based on package respository download stats and some other metrics.</p>
<p>At the time, statistics on the number of downloads for <a href="http://http://leiningen.org/">Leiningen</a> were not available. However, after the blog post was published, <a href="http://technomancy.us/">Phil Hagelberg</a> (the creator of Leiningen) reached out to me letting me know that the stats could be made available if someone were to write some log parsing code to extract them.</p>
<p>So, I recently wrote a little <a href="https://github.com/technomancy/leiningen/pull/1252">log parsing code</a>. Here are the results as of today:</p>
<table class="leiningen-downloads">
        <tr>
               <td>
Downloads from GitHub (through 1/21/2013)
</td>
               <td>
958,033
</td>
        </tr>
        <tr>
               <td>
Downloads from S3 (1/21/2013 until today)
</td>
               <td>
467,730
</td>
        </tr>
        <tr>
               <td>
Total
</td>
               <td>
1,425,763
</td>
        </tr>
        <tr>
                <td>
<br />
</td>
                <td>
<br />
</td>
        </tr>
        <tr>
                <td>
Unique IP Addresses (S3 Downloads Only)
</td>
                <td>
35,888
</td>
        </tr>

</table>

<p>The discrepancy between the unique downloads and total seems to be due to the fact that certain versions of leiningen have been downloaded much more than average. It seems as if a bot or deployment script gone wild has downloaded the same version over and over.</p>
<p>In fact, versions 2.0.0-preview10 and and 2.1.2 account for over a million of the downloads! For comparison, the next most popular version (1.7.1) has only been downloaded 82,444 times. So there’s a little bit of a mystery there.</p>
<p>Let me know if you have any theories!</p>]]></summary>
</entry>
<entry>
    <title>Tracking Clojure vs. Ruby Adoption</title>
    <link href="http://gphil.net/posts/2013-06-10-tracking-clojure-versus-ruby-adoption.html" />
    <id>http://gphil.net/posts/2013-06-10-tracking-clojure-versus-ruby-adoption.html</id>
    <published>2013-06-10T00:00:00Z</published>
    <updated>2013-06-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>If you read my <a href="2013-06-07-thoughts-on-clojure-versus-ruby-for-startups.html">previous post</a>, then you know that I’m rooting for greater adoption of Clojure.</p>
<p>In this post I want to take a more quantitative look at the adoption of Clojure, and benchmark that against Ruby. I picked Ruby because it’s another dynamic language that I use frequently, and because I feel that it has quite a bit of traction.</p>
<p>What follows below is an un-scientific comparison of Clojure and Ruby based on usage statistics culled from their respective package repositories, StackOverflow and GitHub.</p>
<h2 id="package-repositories">Package Repositories</h2>
<p>The package repository for Clojure is <a href="https://clojars.org">Clojars</a>. Since its inception, it’s had 4,215,857 total packages downloaded.</p>
<p>(Edit: <a href="https://twitter.com/xeqixeqi">@xeqixeqi</a> pointed out that Clojars started keeping track of downloads in Oct./Nov. 2012, so these numbers don’t actually go back that far. That may explain why they are lagging Ruby by the most. RubyGems has been keeping track since July 2009.)</p>
<p>The corresponding package repository for Ruby is <a href="https://rubygems.org">RubyGems</a>. RubyGems has 1,677,981,312 total downloads. This is ~398x more than Clojars.</p>
<p>The top package on Clojars is <a href="https://github.com/ring-clojure/ring">Ring</a>, which has been downloaded 131,383 times.</p>
<p>The top package on RubyGems is <a href="https://github.com/wycats/thor">Thor</a> and it has been downloaded 30,235,277 times, which is ~230x more than Ring.</p>
<p>Thor is a tool for making command line utilities and is often also used as a build tool, while Ring is a web application library. The de facto build tool for Clojure is <a href="https://github.com/technomancy/leiningen">Leiningen</a>, which might compare more favorably to Thor. However, it is generally downloaded directly and then used to fetch dependencies from Clojars. So far as I know, no statistics are available on the number of Leiningen downloads.</p>
<p>A more apples-to-apples comparison might be to compare Ring to <a href="https://github.com/rack/rack">Rack</a>, its Ruby analogue:</p>
<p>Rack has 27,119,992 downloads which is ~206x the number of Ring downloads.</p>
<h2 id="stackoverflow">StackOverflow</h2>
<p>I used <a href="http://data.stackexchange.com/stackoverflow/query/90306/compare-size-and-growth-trends-for-stackoverflow-tags">this StackExchange Data Explorer query</a> to compare the number of questions tagged as “clojure” or “ruby” on StackOverflow.</p>
<p>The tag “clojure” has been used 1,919 times in the last 6 months, whereas the tag “ruby” has been used 23,495 times in the last 6 months.</p>
<p>This is a much more favorable comparision for Clojure, as Ruby “only” has a ~12x advantage here.</p>
<h2 id="github">GitHub</h2>
<p>Ring has 1,321 stars, and 166 forks and Rack has 1,973 stars and 596 forks for ratios of ~3.5x and ~1.5x respectively.</p>
<p>Looking at <a href="https://github.com/ring-clojure/ring">Ring</a> and <a href="https://github.com/rack/rack">Rack</a> projects on GitHub, the numbers bode even better for Clojure.</p>
<p>Interestingly, it looks like Ring and Rack both started out on personal accounts and subsequently moved to their own organizations. The number of stars are summations using both accounts, but the number of forks reported was the same on both accounts because both organizations have forked from the original personal projects.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Ruby definitely still has a major adoption and mind-share advantage over Clojure, but Clojure fared better than I thought it would on StackOverflow, and especially on GitHub.</p>
<p>It’s also interesting to note the wide range across the comparisons (400x down to 1.5x), which probably says as much about the communities they came from (as well as the inaccuracy of this methodology) as it does for Clojure versus Ruby adoption in the real world.</p>
<p>I look forward to following these numbers in order to see if Clojure makes inroads against Ruby and lowers these ratios over time.</p>]]></summary>
</entry>
<entry>
    <title>Thoughts on Clojure vs. Ruby for Startups</title>
    <link href="http://gphil.net/posts/2013-06-07-thoughts-on-clojure-versus-ruby-for-startups.html" />
    <id>http://gphil.net/posts/2013-06-07-thoughts-on-clojure-versus-ruby-for-startups.html</id>
    <published>2013-06-07T00:00:00Z</published>
    <updated>2013-06-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>At <a href="https://kwelia.com">Kwelia</a> we’re building our platform using both Ruby and Clojure. As of today, our web application is a Rails app but we do a lot of backend data processing in Clojure. I personally prefer programming in Clojure to programming in Ruby, and some days I wish we had more Clojure than Ruby in our codebase. I don’t think we’ll be switching from Rails any time soon, but we may try to encapsulate more business logic behind Clojure web services in the future.</p>
<p>When we started building our product (and I still think this is true today–although it’s less true now) it was faster and easier to get a production-ready web application up using Ruby on Rails. One of the best features of Rails in my opinion is that it makes a lot of design decisions for you and that it has pretty sane defaults for the most part. This ends up saving a lot of time up front, which is critical for a start up that wants to quickly validate an idea. There is also a lot of open source code available via RubyGems that replaces or expedites a lot of common web application development tasks. This is a one-two punch that’s pretty hard to beat in a start up context.</p>
<p>However, as the Clojure ecosystem matures it’s starting to chip away at the advantages that the Rails ecosystem offers. More and more quality libraries are being shipped to <a href="https://clojars.org">Clojars</a>, and informal conventions are starting to emerge regarding how to structure a web application in Clojure. I think the growth of both of these are critical for newcomers who want to get started on a Clojure webapp quickly. I’m optimistic that these trends will continue and Clojure will continue to become a better and better choice for new projects.</p>]]></summary>
</entry>
<entry>
    <title>Logging in Clojure</title>
    <link href="http://gphil.net/posts/2012-09-04-logging-in-clojure.html" />
    <id>http://gphil.net/posts/2012-09-04-logging-in-clojure.html</id>
    <published>2012-09-04T00:00:00Z</published>
    <updated>2012-09-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>At <a href="http://kwelia.com">Kwelia</a> we are using Clojure for some data integration and transformation tasks. As these tasks started to get more complex, what initially started as some short and somewhat disorganized scripts has now evolved into a larger project which organizes these tasks.</p>
<p>Recently, I wanted to configure a logging service for this project and I found that the process for doing so was not well documented, and I hit a few speedbumps along the way. So, I’ve decided to share what I found here.</p>
<p>After a little bit of research, I discovered <a href="https://github.com/clojure/tools.logging">clojure.tools.logging</a> which is a set of logging macros which delegate to one of many interchangeable logging frameworks. (From the README: “At runtime a specific implementation is selected from, in order, slf4j, Apache commons-logging, log4j, and finally java.util.logging.”)</p>
<p>So, my first stab at it was to just add clojure.tools.logging to my leiningen project and test it out as demonstrated in the README.</p>
<script src="https://gist.github.com/3625496.js"> </script>

<p>I intentionally didn’t try to add any logging backends yet, just to see what happened out of the box. When I tried logging something I got the following messages:</p>
<script src="https://gist.github.com/3625006.js?file=gistfile1.txt"></script>

<p>I figured that this meant that clojure.tools.logging was trying to use SLF4J as the above line quoted from the README suggested it would, but I hadn’t ever explicitly installed SLF4J so I decided to dig into that. Using “lein deps :tree” I found out that <a href="https://github.com/neotyk/http.async.client">http.async.client</a> (which we were already using in this project to integrate with some webservices) depended on it.</p>
<p>Since SLF4J appears itself to be a wrapper for multiple logging backends, and since I’ve used log4j in the past, I decided that I would point SLF4J to use log4j. (I also considered trying to use log4j directly, but I was dissuaded from doing so based on <a href="https://groups.google.com/d/msg/clojure-dev/H0scci72QQ0/ynVUsipwbkMJ">this conversation.</a>)</p>
<p>So I added log4j to my project.clj (the exclusions are optional dependencies not available in Clojars or Maven Central and I did not want to deal with obtaining them from other sources):</p>
<script src="https://gist.github.com/3625485.js"> </script>

<p>And put the following basic log4j configuration in my src/ directory (it can go anywhere on the CLASSPATH):</p>
<script src="https://gist.github.com/3624967.js"></script>

<p>Finally, I had to explicitly add the log4j adapter for SLF4J in order to get everything to link up.</p>
<script src="https://gist.github.com/3625561.js"> </script>

<p>After adding these dependencies and the log4j.properties configuration file, I was successfully able to use clojure.tools.logging to log to log4j via SLF4J.</p>
<p>Hopefully this is helpful to somebody else who’s trying to figure this out. I’m no expert in this domain, so if you think I did something wrong please let me know in the comments.</p>]]></summary>
</entry>

</feed>
