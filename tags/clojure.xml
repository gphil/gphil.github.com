<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>gphil's blog - Posts tagged clojure</title>
    <link href="http://gphil.net/tags/clojure.xml" rel="self" />
    <link href="http://gphil.net" />
    <id>http://gphil.net/tags/clojure.xml</id>
    <author>
        <name>Greg Phillips</name>
        <email>gap023@gmail.com</email>
    </author>
    <updated>2013-06-06T00:00:00Z</updated>
    <entry>
    <title>Thoughts on Clojure vs. Ruby for Startups</title>
    <link href="http://gphil.net/posts/2013-06-06-thoughts-on-clojure-versus-ruby-for-startups.html" />
    <id>http://gphil.net/posts/2013-06-06-thoughts-on-clojure-versus-ruby-for-startups.html</id>
    <published>2013-06-06T00:00:00Z</published>
    <updated>2013-06-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>At <a href="https://kwelia.com">Kwelia</a> we’re building our platform using both Ruby and Clojure. As of today, our web application is a Rails app but we do a lot of backend data processing in Clojure. I personally prefer programming in Clojure to programming in Ruby, and some days I wish we had more Clojure than Ruby in our codebase. I don’t think we’ll be switching from Rails any time soon, but we may try to encapsulate more business logic behind Clojure web services in the future.</p>
<p>When we started building our product (and I still think this is true today–although it’s less true now) it was faster and easier to get a production-ready web application up using Ruby on Rails. One of the best features of Rails in my opinion is that it makes a lot of design decisions for you and that it has pretty sane defaults for the most part. This ends up saving a lot of time up front, which is critical for a start up that wants to quickly validate an idea. There is also a lot of open source code available via RubyGems that replaces or expedites a lot of common web application development tasks. This is a one-two punch that’s pretty hard to beat in a start up context.</p>
<p>However, as the Clojure ecosystem matures it’s starting to chip away at the advantages that the Rails ecosystem offers. More and more quality libraries are being shipped to <a href="https://clojars.org">Clojars</a>, and informal conventions are starting to emerge regarding how to structure a web application in Clojure. I think the growth of both of these are critical for newcomers who want to get started on a Clojure webapp quickly. I’m optimistic that these trends will continue and Clojure will continue to become a better and better choice for new projects.</p>]]></summary>
</entry>
<entry>
    <title>Logging in Clojure</title>
    <link href="http://gphil.net/posts/2012-09-04-logging-in-clojure.html" />
    <id>http://gphil.net/posts/2012-09-04-logging-in-clojure.html</id>
    <published>2012-09-04T00:00:00Z</published>
    <updated>2012-09-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>At <a href="http://kwelia.com">Kwelia</a> we are using Clojure for some data integration and transformation tasks. As these tasks started to get more complex, what initially started as some short and somewhat disorganized scripts has now evolved into a larger project which organizes these tasks.</p>
<p>Recently, I wanted to configure a logging service for this project and I found that the process for doing so was not well documented, and I hit a few speedbumps along the way. So, I’ve decided to share what I found here.</p>
<p>After a little bit of research, I discovered <a href="https://github.com/clojure/tools.logging">clojure.tools.logging</a> which is a set of logging macros which delegate to one of many interchangeable logging frameworks. (From the README: “At runtime a specific implementation is selected from, in order, slf4j, Apache commons-logging, log4j, and finally java.util.logging.”)</p>
<p>So, my first stab at it was to just add clojure.tools.logging to my leiningen project and test it out as demonstrated in the README.</p>
<script src="https://gist.github.com/3625496.js"> </script>

<p>I intentionally didn’t try to add any logging backends yet, just to see what happened out of the box. When I tried logging something I got the following messages:</p>
<script src="https://gist.github.com/3625006.js?file=gistfile1.txt"></script>

<p>I figured that this meant that clojure.tools.logging was trying to use SLF4J as the above line quoted from the README suggested it would, but I hadn’t ever explicitly installed SLF4J so I decided to dig into that. Using “lein deps :tree” I found out that <a href="https://github.com/neotyk/http.async.client">http.async.client</a> (which we were already using in this project to integrate with some webservices) depended on it.</p>
<p>Since SLF4J appears itself to be a wrapper for multiple logging backends, and since I’ve used log4j in the past, I decided that I would point SLF4J to use log4j. (I also considered trying to use log4j directly, but I was dissuaded from doing so based on <a href="https://groups.google.com/d/msg/clojure-dev/H0scci72QQ0/ynVUsipwbkMJ">this conversation.</a>)</p>
<p>So I added log4j to my project.clj (the exclusions are optional dependencies not available in Clojars or Maven Central and I did not want to deal with obtaining them from other sources):</p>
<script src="https://gist.github.com/3625485.js"> </script>

<p>And put the following basic log4j configuration in my src/ directory (it can go anywhere on the CLASSPATH):</p>
<script src="https://gist.github.com/3624967.js"></script>

<p>Finally, I had to explicitly add the log4j adapter for SLF4J in order to get everything to link up.</p>
<script src="https://gist.github.com/3625561.js"> </script>

<p>After adding these dependencies and the log4j.properties configuration file, I was successfully able to use clojure.tools.logging to log to log4j via SLF4J.</p>
<p>Hopefully this is helpful to somebody else who’s trying to figure this out. I’m no expert in this domain, so if you think I did something wrong please let me know in the comments.</p>]]></summary>
</entry>

</feed>
